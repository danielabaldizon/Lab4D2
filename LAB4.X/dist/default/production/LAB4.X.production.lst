

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat Feb 15 22:10:10 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.10
    20                           ; Generated 31/07/2019 GMT
    21                           ; 
    22                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F887 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  008F                     	;# 
    98  0090                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  0105                     	;# 
   117  0107                     	;# 
   118  0108                     	;# 
   119  0109                     	;# 
   120  010C                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  010F                     	;# 
   125  0185                     	;# 
   126  0187                     	;# 
   127  0188                     	;# 
   128  0189                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  0000                     	;# 
   132  0001                     	;# 
   133  0002                     	;# 
   134  0003                     	;# 
   135  0004                     	;# 
   136  0005                     	;# 
   137  0006                     	;# 
   138  0007                     	;# 
   139  0008                     	;# 
   140  0009                     	;# 
   141  000A                     	;# 
   142  000B                     	;# 
   143  000C                     	;# 
   144  000D                     	;# 
   145  000E                     	;# 
   146  000E                     	;# 
   147  000F                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0013                     	;# 
   152  0014                     	;# 
   153  0015                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0017                     	;# 
   157  0018                     	;# 
   158  0019                     	;# 
   159  001A                     	;# 
   160  001B                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001D                     	;# 
   164  001E                     	;# 
   165  001F                     	;# 
   166  0081                     	;# 
   167  0085                     	;# 
   168  0086                     	;# 
   169  0087                     	;# 
   170  0088                     	;# 
   171  0089                     	;# 
   172  008C                     	;# 
   173  008D                     	;# 
   174  008E                     	;# 
   175  008F                     	;# 
   176  0090                     	;# 
   177  0091                     	;# 
   178  0092                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0094                     	;# 
   183  0095                     	;# 
   184  0096                     	;# 
   185  0097                     	;# 
   186  0098                     	;# 
   187  0099                     	;# 
   188  009A                     	;# 
   189  009B                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  009F                     	;# 
   194  0105                     	;# 
   195  0107                     	;# 
   196  0108                     	;# 
   197  0109                     	;# 
   198  010C                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  010F                     	;# 
   203  0185                     	;# 
   204  0187                     	;# 
   205  0188                     	;# 
   206  0189                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  0000                     	;# 
   210  0001                     	;# 
   211  0002                     	;# 
   212  0003                     	;# 
   213  0004                     	;# 
   214  0005                     	;# 
   215  0006                     	;# 
   216  0007                     	;# 
   217  0008                     	;# 
   218  0009                     	;# 
   219  000A                     	;# 
   220  000B                     	;# 
   221  000C                     	;# 
   222  000D                     	;# 
   223  000E                     	;# 
   224  000E                     	;# 
   225  000F                     	;# 
   226  0010                     	;# 
   227  0011                     	;# 
   228  0012                     	;# 
   229  0013                     	;# 
   230  0014                     	;# 
   231  0015                     	;# 
   232  0015                     	;# 
   233  0016                     	;# 
   234  0017                     	;# 
   235  0018                     	;# 
   236  0019                     	;# 
   237  001A                     	;# 
   238  001B                     	;# 
   239  001B                     	;# 
   240  001C                     	;# 
   241  001D                     	;# 
   242  001E                     	;# 
   243  001F                     	;# 
   244  0081                     	;# 
   245  0085                     	;# 
   246  0086                     	;# 
   247  0087                     	;# 
   248  0088                     	;# 
   249  0089                     	;# 
   250  008C                     	;# 
   251  008D                     	;# 
   252  008E                     	;# 
   253  008F                     	;# 
   254  0090                     	;# 
   255  0091                     	;# 
   256  0092                     	;# 
   257  0093                     	;# 
   258  0093                     	;# 
   259  0093                     	;# 
   260  0094                     	;# 
   261  0095                     	;# 
   262  0096                     	;# 
   263  0097                     	;# 
   264  0098                     	;# 
   265  0099                     	;# 
   266  009A                     	;# 
   267  009B                     	;# 
   268  009C                     	;# 
   269  009D                     	;# 
   270  009E                     	;# 
   271  009F                     	;# 
   272  0105                     	;# 
   273  0107                     	;# 
   274  0108                     	;# 
   275  0109                     	;# 
   276  010C                     	;# 
   277  010C                     	;# 
   278  010D                     	;# 
   279  010E                     	;# 
   280  010F                     	;# 
   281  0185                     	;# 
   282  0187                     	;# 
   283  0188                     	;# 
   284  0189                     	;# 
   285  018C                     	;# 
   286  018D                     	;# 
   287  0000                     	;# 
   288  0001                     	;# 
   289  0002                     	;# 
   290  0003                     	;# 
   291  0004                     	;# 
   292  0005                     	;# 
   293  0006                     	;# 
   294  0007                     	;# 
   295  0008                     	;# 
   296  0009                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000D                     	;# 
   301  000E                     	;# 
   302  000E                     	;# 
   303  000F                     	;# 
   304  0010                     	;# 
   305  0011                     	;# 
   306  0012                     	;# 
   307  0013                     	;# 
   308  0014                     	;# 
   309  0015                     	;# 
   310  0015                     	;# 
   311  0016                     	;# 
   312  0017                     	;# 
   313  0018                     	;# 
   314  0019                     	;# 
   315  001A                     	;# 
   316  001B                     	;# 
   317  001B                     	;# 
   318  001C                     	;# 
   319  001D                     	;# 
   320  001E                     	;# 
   321  001F                     	;# 
   322  0081                     	;# 
   323  0085                     	;# 
   324  0086                     	;# 
   325  0087                     	;# 
   326  0088                     	;# 
   327  0089                     	;# 
   328  008C                     	;# 
   329  008D                     	;# 
   330  008E                     	;# 
   331  008F                     	;# 
   332  0090                     	;# 
   333  0091                     	;# 
   334  0092                     	;# 
   335  0093                     	;# 
   336  0093                     	;# 
   337  0093                     	;# 
   338  0094                     	;# 
   339  0095                     	;# 
   340  0096                     	;# 
   341  0097                     	;# 
   342  0098                     	;# 
   343  0099                     	;# 
   344  009A                     	;# 
   345  009B                     	;# 
   346  009C                     	;# 
   347  009D                     	;# 
   348  009E                     	;# 
   349  009F                     	;# 
   350  0105                     	;# 
   351  0107                     	;# 
   352  0108                     	;# 
   353  0109                     	;# 
   354  010C                     	;# 
   355  010C                     	;# 
   356  010D                     	;# 
   357  010E                     	;# 
   358  010F                     	;# 
   359  0185                     	;# 
   360  0187                     	;# 
   361  0188                     	;# 
   362  0189                     	;# 
   363  018C                     	;# 
   364  018D                     	;# 
   365  0013                     _SSPBUF	set	19
   366  0014                     _SSPCON	set	20
   367  0005                     _PORTA	set	5
   368  0006                     _PORTB	set	6
   369  001A                     _RCREG	set	26
   370  0019                     _TXREG	set	25
   371  0065                     _RCIF	set	101
   372  00C4                     _CREN	set	196
   373  00C7                     _SPEN	set	199
   374  0094                     _SSPSTATbits	set	148
   375  0094                     _SSPSTAT	set	148
   376  0085                     _TRISA	set	133
   377  0086                     _TRISB	set	134
   378  0099                     _SPBRG	set	153
   379  043B                     _TRISC3	set	1083
   380  043D                     _TRISC5	set	1085
   381  04C1                     _TRMT	set	1217
   382  04C5                     _TXEN	set	1221
   383  043E                     _TRISC6	set	1086
   384  043F                     _TRISC7	set	1087
   385  04C4                     _SYNC	set	1220
   386  04C2                     _BRGH	set	1218
   387  0188                     _ANSEL	set	392
   388  0189                     _ANSELH	set	393
   389                           
   390                           ; #config settings
   391  0000                     
   392                           	psect	cinit
   393  07FB                     start_initialization:	
   394  07FB                     __initialization:	
   395                           
   396                           ; Clear objects allocated to COMMON
   397  07FB  01FC               	clrf	__pbssCOMMON& (0+127)
   398  07FC                     end_of_initialization:	
   399                           ;End of C runtime variable initialization code
   400                           
   401  07FC                     __end_of__initialization:	
   402  07FC  0183               	clrf	3
   403  07FD  120A  118A  2E0E   	ljmp	_main	;jump to C main() function
   404                           
   405                           	psect	bssCOMMON
   406  007C                     __pbssCOMMON:	
   407  007C                     _valeido:	
   408  007C                     	ds	1
   409                           
   410                           	psect	cstackCOMMON
   411  0070                     __pcstackCOMMON:	
   412  0070                     ?_spiInit:	
   413  0070                     ?_spiWrite:	
   414                           ; 1 bytes @ 0x0
   415                           
   416  0070                     ??_spiWrite:	
   417                           ; 1 bytes @ 0x0
   418                           
   419  0070                     ?_spiRead:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0070                     ??_spiRead:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0070                     ?_UART_Write:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0070                     ??_UART_Write:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0070                     ?_UART_Read:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0070                     ??_UART_Read:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0070                     ?_main:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     ?_spiReceiveWait:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ??_spiReceiveWait:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0070                     ?___aldiv:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0070                     spiInit@sDataSample:	
   450                           ; 4 bytes @ 0x0
   451                           
   452  0070                     spiWrite@dat:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ___aldiv@divisor:	
   456                           ; 1 bytes @ 0x0
   457                           
   458                           
   459                           ; 4 bytes @ 0x0
   460  0070                     	ds	1
   461  0071                     spiInit@sClockIdle:	
   462                           
   463                           ; 1 bytes @ 0x1
   464  0071                     	ds	1
   465  0072                     UART_Write@data:	
   466  0072                     spiInit@sTransmitEdge:	
   467                           ; 1 bytes @ 0x2
   468                           
   469                           
   470                           ; 1 bytes @ 0x2
   471  0072                     	ds	1
   472  0073                     ??_spiInit:	
   473  0073                     spiInit@sType:	
   474                           ; 1 bytes @ 0x3
   475                           
   476                           
   477                           ; 1 bytes @ 0x3
   478  0073                     	ds	1
   479  0074                     ___aldiv@dividend:	
   480                           
   481                           ; 4 bytes @ 0x4
   482  0074                     	ds	4
   483  0078                     ??___aldiv:	
   484                           
   485                           ; 1 bytes @ 0x8
   486  0078                     	ds	1
   487  0079                     UART_Init@x:	
   488                           
   489                           ; 2 bytes @ 0x9
   490  0079                     	ds	2
   491  007B                     ??_main:	
   492                           
   493                           ; 1 bytes @ 0xB
   494  007B                     	ds	1
   495                           
   496                           	psect	cstackBANK0
   497  0020                     __pcstackBANK0:	
   498  0020                     ___aldiv@counter:	
   499                           
   500                           ; 1 bytes @ 0x0
   501  0020                     	ds	1
   502  0021                     ___aldiv@sign:	
   503                           
   504                           ; 1 bytes @ 0x1
   505  0021                     	ds	1
   506  0022                     ___aldiv@quotient:	
   507                           
   508                           ; 4 bytes @ 0x2
   509  0022                     	ds	4
   510  0026                     ?_UART_Init:	
   511  0026                     UART_Init@baudrate:	
   512                           ; 1 bytes @ 0x6
   513                           
   514                           
   515                           ; 4 bytes @ 0x6
   516  0026                     	ds	4
   517  002A                     ??_UART_Init:	
   518                           
   519                           ; 1 bytes @ 0xA
   520  002A                     	ds	12
   521  0036                     main@POT2:	
   522                           
   523                           ; 1 bytes @ 0x16
   524  0036                     	ds	1
   525  0037                     main@COMPU:	
   526                           
   527                           ; 1 bytes @ 0x17
   528  0037                     	ds	1
   529  0038                     main@POT1:	
   530                           
   531                           ; 1 bytes @ 0x18
   532  0038                     	ds	1
   533                           
   534                           	psect	maintext
   535  060E                     __pmaintext:	
   536 ;;
   537 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   538 ;;
   539 ;; *************** function _main *****************
   540 ;; Defined at:
   541 ;;		line 32 in file "MASTER.c"
   542 ;; Parameters:    Size  Location     Type
   543 ;;		None
   544 ;; Auto vars:     Size  Location     Type
   545 ;;  POT1            1   24[BANK0 ] unsigned char 
   546 ;;  COMPU           1   23[BANK0 ] unsigned char 
   547 ;;  POT2            1   22[BANK0 ] unsigned char 
   548 ;; Return value:  Size  Location     Type
   549 ;;                  1    wreg      void 
   550 ;; Registers used:
   551 ;;		wreg, status,2, status,0, pclath, cstack
   552 ;; Tracked objects:
   553 ;;		On entry : B00/0
   554 ;;		On exit  : 0/0
   555 ;;		Unchanged: 0/0
   556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   557 ;;      Params:         0       0       0       0       0
   558 ;;      Locals:         0       3       0       0       0
   559 ;;      Temps:          1       0       0       0       0
   560 ;;      Totals:         1       3       0       0       0
   561 ;;Total ram usage:        4 bytes
   562 ;; Hardware stack levels required when called:    2
   563 ;; This function calls:
   564 ;;		_UART_Init
   565 ;;		_UART_Read
   566 ;;		_UART_Write
   567 ;;		_spiInit
   568 ;;		_spiRead
   569 ;;		_spiWrite
   570 ;; This function is called by:
   571 ;;		Startup code after reset
   572 ;; This function uses a non-reentrant model
   573 ;;
   574                           
   575                           
   576                           ;psect for function _main
   577  060E                     _main:	
   578  060E                     l961:	
   579                           ;incstack = 0
   580                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   581                           
   582                           
   583                           ;MASTER.c: 34:     ANSELH = 0;
   584  060E  1683               	bsf	3,5	;RP0=1, select bank3
   585  060F  1703               	bsf	3,6	;RP1=1, select bank3
   586  0610  0189               	clrf	9	;volatile
   587                           
   588                           ;MASTER.c: 35:     ANSEL = 0;
   589  0611  0188               	clrf	8	;volatile
   590                           
   591                           ;MASTER.c: 36:     TRISB = 0;
   592  0612  1683               	bsf	3,5	;RP0=1, select bank1
   593  0613  1303               	bcf	3,6	;RP1=0, select bank1
   594  0614  0186               	clrf	6	;volatile
   595                           
   596                           ;MASTER.c: 37:     PORTB = 0;
   597  0615  1283               	bcf	3,5	;RP0=0, select bank0
   598  0616  1303               	bcf	3,6	;RP1=0, select bank0
   599  0617  0186               	clrf	6	;volatile
   600                           
   601                           ;MASTER.c: 38:     TRISA = 0;
   602  0618  1683               	bsf	3,5	;RP0=1, select bank1
   603  0619  1303               	bcf	3,6	;RP1=0, select bank1
   604  061A  0185               	clrf	5	;volatile
   605                           
   606                           ;MASTER.c: 39:     PORTA = 0;
   607  061B  1283               	bcf	3,5	;RP0=0, select bank0
   608  061C  1303               	bcf	3,6	;RP1=0, select bank0
   609  061D  0185               	clrf	5	;volatile
   610  061E                     l963:	
   611                           
   612                           ;MASTER.c: 41:     UART_Init(9600);
   613  061E  3000               	movlw	0
   614  061F  00A9               	movwf	UART_Init@baudrate+3
   615  0620  3000               	movlw	0
   616  0621  00A8               	movwf	UART_Init@baudrate+2
   617  0622  3025               	movlw	37
   618  0623  00A7               	movwf	UART_Init@baudrate+1
   619  0624  3080               	movlw	128
   620  0625  00A6               	movwf	UART_Init@baudrate
   621  0626  120A  118A  2721  120A  118A  	fcall	_UART_Init
   622  062B                     l965:	
   623                           
   624                           ;MASTER.c: 42:     unsigned char POT1;;MASTER.c: 43:     unsigned char POT2;;MASTER.c: 4
      +                          4:     uint8_t COMPU;;MASTER.c: 46:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MID
      +                          DLE, SPI_CLOCK_IDLE_LOW, SPI_IDLE_2_ACTIVE);
   625  062B  01F0               	clrf	spiInit@sDataSample
   626  062C  01F1               	clrf	spiInit@sClockIdle
   627  062D  01F2               	clrf	spiInit@sTransmitEdge
   628  062E  3020               	movlw	32
   629  062F  120A  118A  25F8  120A  118A  	fcall	_spiInit
   630  0634                     l967:	
   631                           
   632                           ;MASTER.c: 50:         UART_Write(POT1);
   633  0634  1283               	bcf	3,5	;RP0=0, select bank0
   634  0635  1303               	bcf	3,6	;RP1=0, select bank0
   635  0636  0838               	movf	main@POT1,w
   636  0637  120A  118A  25E3  120A  118A  	fcall	_UART_Write
   637  063C                     l969:	
   638                           
   639                           ;MASTER.c: 53:         UART_Write(POT2);
   640  063C  1283               	bcf	3,5	;RP0=0, select bank0
   641  063D  1303               	bcf	3,6	;RP1=0, select bank0
   642  063E  0836               	movf	main@POT2,w
   643  063F  120A  118A  25E3  120A  118A  	fcall	_UART_Write
   644  0644                     l971:	
   645                           
   646                           ;MASTER.c: 56:         COMPU = UART_Read();
   647  0644  120A  118A  25D7  120A  118A  	fcall	_UART_Read
   648  0649  00FB               	movwf	??_main
   649  064A  087B               	movf	??_main,w
   650  064B  1283               	bcf	3,5	;RP0=0, select bank0
   651  064C  1303               	bcf	3,6	;RP1=0, select bank0
   652  064D  00B7               	movwf	main@COMPU
   653  064E                     l973:	
   654                           
   655                           ;MASTER.c: 57:         PORTB = COMPU;
   656  064E  0837               	movf	main@COMPU,w
   657  064F  0086               	movwf	6	;volatile
   658  0650                     l975:	
   659                           
   660                           ;MASTER.c: 60:         spiWrite(0x01);
   661  0650  3001               	movlw	1
   662  0651  120A  118A  25C1  120A  118A  	fcall	_spiWrite
   663  0656                     l977:	
   664                           
   665                           ;MASTER.c: 61:         POT1 = spiRead();
   666  0656  120A  118A  25CE  120A  118A  	fcall	_spiRead
   667  065B  00FB               	movwf	??_main
   668  065C  087B               	movf	??_main,w
   669  065D  1283               	bcf	3,5	;RP0=0, select bank0
   670  065E  1303               	bcf	3,6	;RP1=0, select bank0
   671  065F  00B8               	movwf	main@POT1
   672  0660                     l979:	
   673                           
   674                           ;MASTER.c: 62:         PORTA = POT1;
   675  0660  0838               	movf	main@POT1,w
   676  0661  0085               	movwf	5	;volatile
   677  0662                     l981:	
   678                           
   679                           ;MASTER.c: 64:         _delay((unsigned long)((0.8)*(4000000/4000.0)));
   680  0662  309F               	movlw	159
   681  0663  00FB               	movwf	??_main
   682  0664                     u477:	
   683  0664  2E65               	nop2
   684  0665  0BFB               	decfsz	??_main,f
   685  0666  2E64               	goto	u477
   686  0667  2E68               	nop2
   687  0668  2E69               	nop2
   688  0669                     l983:	
   689                           
   690                           ;MASTER.c: 67:         spiWrite(0x02);
   691  0669  3002               	movlw	2
   692  066A  120A  118A  25C1  120A  118A  	fcall	_spiWrite
   693  066F                     l985:	
   694                           
   695                           ;MASTER.c: 68:         POT2 = spiRead();
   696  066F  120A  118A  25CE  120A  118A  	fcall	_spiRead
   697  0674  00FB               	movwf	??_main
   698  0675  087B               	movf	??_main,w
   699  0676  1283               	bcf	3,5	;RP0=0, select bank0
   700  0677  1303               	bcf	3,6	;RP1=0, select bank0
   701  0678  00B6               	movwf	main@POT2
   702  0679                     l987:	
   703                           
   704                           ;MASTER.c: 71:         _delay((unsigned long)((0.8)*(4000000/4000.0)));
   705  0679  309F               	movlw	159
   706  067A  00FB               	movwf	??_main
   707  067B                     u487:	
   708  067B  2E7C               	nop2
   709  067C  0BFB               	decfsz	??_main,f
   710  067D  2E7B               	goto	u487
   711  067E  2E7F               	nop2
   712  067F  2E80               	nop2
   713  0680  2E34               	goto	l967
   714  0681  120A  118A  2800   	ljmp	start
   715  0684                     __end_of_main:	
   716                           
   717                           	psect	text1
   718  05C1                     __ptext1:	
   719 ;; *************** function _spiWrite *****************
   720 ;; Defined at:
   721 ;;		line 34 in file "SPIM.c"
   722 ;; Parameters:    Size  Location     Type
   723 ;;  dat             1    wreg     unsigned char 
   724 ;; Auto vars:     Size  Location     Type
   725 ;;  dat             1    0[COMMON] unsigned char 
   726 ;; Return value:  Size  Location     Type
   727 ;;                  1    wreg      void 
   728 ;; Registers used:
   729 ;;		wreg
   730 ;; Tracked objects:
   731 ;;		On entry : 0/0
   732 ;;		On exit  : 0/0
   733 ;;		Unchanged: 0/0
   734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   735 ;;      Params:         0       0       0       0       0
   736 ;;      Locals:         1       0       0       0       0
   737 ;;      Temps:          0       0       0       0       0
   738 ;;      Totals:         1       0       0       0       0
   739 ;;Total ram usage:        1 bytes
   740 ;; Hardware stack levels used:    1
   741 ;; This function calls:
   742 ;;		Nothing
   743 ;; This function is called by:
   744 ;;		_main
   745 ;; This function uses a non-reentrant model
   746 ;;
   747                           
   748                           
   749                           ;psect for function _spiWrite
   750  05C1                     _spiWrite:	
   751                           
   752                           ;incstack = 0
   753                           ; Regs used in _spiWrite: [wreg]
   754                           ;spiWrite@dat stored from wreg
   755  05C1  00F0               	movwf	spiWrite@dat
   756  05C2                     l945:	
   757                           
   758                           ;SPIM.c: 34: void spiWrite(char dat);SPIM.c: 35: {;SPIM.c: 36:     SSPBUF = dat;
   759  05C2  0870               	movf	spiWrite@dat,w
   760  05C3  1283               	bcf	3,5	;RP0=0, select bank0
   761  05C4  1303               	bcf	3,6	;RP1=0, select bank0
   762  05C5  0093               	movwf	19	;volatile
   763  05C6                     l115:	
   764  05C6  0008               	return
   765  05C7                     __end_of_spiWrite:	
   766                           
   767                           	psect	text2
   768  05CE                     __ptext2:	
   769 ;; *************** function _spiRead *****************
   770 ;; Defined at:
   771 ;;		line 47 in file "SPIM.c"
   772 ;; Parameters:    Size  Location     Type
   773 ;;		None
   774 ;; Auto vars:     Size  Location     Type
   775 ;;		None
   776 ;; Return value:  Size  Location     Type
   777 ;;                  1    wreg      unsigned char 
   778 ;; Registers used:
   779 ;;		wreg, status,2, status,0, pclath, cstack
   780 ;; Tracked objects:
   781 ;;		On entry : 0/0
   782 ;;		On exit  : 0/0
   783 ;;		Unchanged: 0/0
   784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   785 ;;      Params:         0       0       0       0       0
   786 ;;      Locals:         0       0       0       0       0
   787 ;;      Temps:          0       0       0       0       0
   788 ;;      Totals:         0       0       0       0       0
   789 ;;Total ram usage:        0 bytes
   790 ;; Hardware stack levels used:    1
   791 ;; Hardware stack levels required when called:    1
   792 ;; This function calls:
   793 ;;		_spiReceiveWait
   794 ;; This function is called by:
   795 ;;		_main
   796 ;; This function uses a non-reentrant model
   797 ;;
   798                           
   799                           
   800                           ;psect for function _spiRead
   801  05CE                     _spiRead:	
   802  05CE                     l947:	
   803                           ;incstack = 0
   804                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
   805                           
   806                           
   807                           ;SPIM.c: 49:     spiReceiveWait();
   808  05CE  120A  118A  25C7  120A  118A  	fcall	_spiReceiveWait
   809  05D3                     l949:	
   810                           
   811                           ;SPIM.c: 50:     return(SSPBUF);
   812  05D3  1283               	bcf	3,5	;RP0=0, select bank0
   813  05D4  1303               	bcf	3,6	;RP1=0, select bank0
   814  05D5  0813               	movf	19,w	;volatile
   815  05D6                     l123:	
   816  05D6  0008               	return
   817  05D7                     __end_of_spiRead:	
   818                           
   819                           	psect	text3
   820  05C7                     __ptext3:	
   821 ;; *************** function _spiReceiveWait *****************
   822 ;; Defined at:
   823 ;;		line 29 in file "SPIM.c"
   824 ;; Parameters:    Size  Location     Type
   825 ;;		None
   826 ;; Auto vars:     Size  Location     Type
   827 ;;		None
   828 ;; Return value:  Size  Location     Type
   829 ;;                  1    wreg      void 
   830 ;; Registers used:
   831 ;;		None
   832 ;; Tracked objects:
   833 ;;		On entry : 0/0
   834 ;;		On exit  : 0/0
   835 ;;		Unchanged: 0/0
   836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   837 ;;      Params:         0       0       0       0       0
   838 ;;      Locals:         0       0       0       0       0
   839 ;;      Temps:          0       0       0       0       0
   840 ;;      Totals:         0       0       0       0       0
   841 ;;Total ram usage:        0 bytes
   842 ;; Hardware stack levels used:    1
   843 ;; This function calls:
   844 ;;		Nothing
   845 ;; This function is called by:
   846 ;;		_spiRead
   847 ;; This function uses a non-reentrant model
   848 ;;
   849                           
   850                           
   851                           ;psect for function _spiReceiveWait
   852  05C7                     _spiReceiveWait:	
   853  05C7                     l857:	
   854                           ;incstack = 0
   855                           ; Regs used in _spiReceiveWait: []
   856                           
   857  05C7                     l109:	
   858                           ;SPIM.c: 31:     while ( !SSPSTATbits.BF );
   859                           
   860  05C7  1683               	bsf	3,5	;RP0=1, select bank1
   861  05C8  1303               	bcf	3,6	;RP1=0, select bank1
   862  05C9  1C14               	btfss	20,0	;volatile
   863  05CA  2DCC               	goto	u241
   864  05CB  2DCD               	goto	u240
   865  05CC                     u241:	
   866  05CC  2DC7               	goto	l109
   867  05CD                     u240:	
   868  05CD                     l112:	
   869  05CD  0008               	return
   870  05CE                     __end_of_spiReceiveWait:	
   871                           
   872                           	psect	text4
   873  05F8                     __ptext4:	
   874 ;; *************** function _spiInit *****************
   875 ;; Defined at:
   876 ;;		line 12 in file "SPIM.c"
   877 ;; Parameters:    Size  Location     Type
   878 ;;  sType           1    wreg     enum E1264
   879 ;;  sDataSample     1    0[COMMON] enum E1272
   880 ;;  sClockIdle      1    1[COMMON] enum E1276
   881 ;;  sTransmitEdg    1    2[COMMON] enum E1280
   882 ;; Auto vars:     Size  Location     Type
   883 ;;  sType           1    3[COMMON] enum E1264
   884 ;; Return value:  Size  Location     Type
   885 ;;                  1    wreg      void 
   886 ;; Registers used:
   887 ;;		wreg, status,2, status,0
   888 ;; Tracked objects:
   889 ;;		On entry : 0/0
   890 ;;		On exit  : 0/0
   891 ;;		Unchanged: 0/0
   892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   893 ;;      Params:         3       0       0       0       0
   894 ;;      Locals:         1       0       0       0       0
   895 ;;      Temps:          0       0       0       0       0
   896 ;;      Totals:         4       0       0       0       0
   897 ;;Total ram usage:        4 bytes
   898 ;; Hardware stack levels used:    1
   899 ;; This function calls:
   900 ;;		Nothing
   901 ;; This function is called by:
   902 ;;		_main
   903 ;; This function uses a non-reentrant model
   904 ;;
   905                           
   906                           
   907                           ;psect for function _spiInit
   908  05F8                     _spiInit:	
   909                           
   910                           ;incstack = 0
   911                           ; Regs used in _spiInit: [wreg+status,2+status,0]
   912                           ;spiInit@sType stored from wreg
   913  05F8  00F3               	movwf	spiInit@sType
   914  05F9                     l935:	
   915                           
   916                           ;SPIM.c: 12: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sC
      +                          lockIdle, Spi_Transmit_Edge sTransmitEdge);SPIM.c: 13: {;SPIM.c: 14:     TRISC5 = 0;
   917  05F9  1683               	bsf	3,5	;RP0=1, select bank1
   918  05FA  1303               	bcf	3,6	;RP1=0, select bank1
   919  05FB  1287               	bcf	7,5	;volatile
   920                           
   921                           ;SPIM.c: 15:     if(sType & 0b00000100)
   922  05FC  1D73               	btfss	spiInit@sType,2
   923  05FD  2DFF               	goto	u451
   924  05FE  2E00               	goto	u450
   925  05FF                     u451:	
   926  05FF  2E04               	goto	l941
   927  0600                     u450:	
   928  0600                     l937:	
   929                           
   930                           ;SPIM.c: 16:     {;SPIM.c: 17:         SSPSTAT = sTransmitEdge;
   931  0600  0872               	movf	spiInit@sTransmitEdge,w
   932  0601  0094               	movwf	20	;volatile
   933  0602                     l939:	
   934                           
   935                           ;SPIM.c: 18:         TRISC3 = 1;
   936  0602  1587               	bsf	7,3	;volatile
   937                           
   938                           ;SPIM.c: 19:     }
   939  0603  2E08               	goto	l105
   940  0604                     l941:	
   941                           
   942                           ;SPIM.c: 21:     {;SPIM.c: 22:         SSPSTAT = sDataSample | sTransmitEdge;
   943  0604  0870               	movf	spiInit@sDataSample,w
   944  0605  0472               	iorwf	spiInit@sTransmitEdge,w
   945  0606  0094               	movwf	20	;volatile
   946  0607                     l943:	
   947                           
   948                           ;SPIM.c: 23:         TRISC3 = 0;
   949  0607  1187               	bcf	7,3	;volatile
   950  0608                     l105:	
   951                           ;SPIM.c: 24:     }
   952                           
   953                           
   954                           ;SPIM.c: 26:     SSPCON = sType | sClockIdle;
   955  0608  0873               	movf	spiInit@sType,w
   956  0609  0471               	iorwf	spiInit@sClockIdle,w
   957  060A  1283               	bcf	3,5	;RP0=0, select bank0
   958  060B  1303               	bcf	3,6	;RP1=0, select bank0
   959  060C  0094               	movwf	20	;volatile
   960  060D                     l106:	
   961  060D  0008               	return
   962  060E                     __end_of_spiInit:	
   963                           
   964                           	psect	text5
   965  05E3                     __ptext5:	
   966 ;; *************** function _UART_Write *****************
   967 ;; Defined at:
   968 ;;		line 39 in file "RXTX.c"
   969 ;; Parameters:    Size  Location     Type
   970 ;;  data            1    wreg     unsigned char 
   971 ;; Auto vars:     Size  Location     Type
   972 ;;  data            1    2[COMMON] unsigned char 
   973 ;; Return value:  Size  Location     Type
   974 ;;                  1    wreg      void 
   975 ;; Registers used:
   976 ;;		wreg
   977 ;; Tracked objects:
   978 ;;		On entry : 0/0
   979 ;;		On exit  : 0/0
   980 ;;		Unchanged: 0/0
   981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   982 ;;      Params:         0       0       0       0       0
   983 ;;      Locals:         1       0       0       0       0
   984 ;;      Temps:          2       0       0       0       0
   985 ;;      Totals:         3       0       0       0       0
   986 ;;Total ram usage:        3 bytes
   987 ;; Hardware stack levels used:    1
   988 ;; This function calls:
   989 ;;		Nothing
   990 ;; This function is called by:
   991 ;;		_main
   992 ;; This function uses a non-reentrant model
   993 ;;
   994                           
   995                           
   996                           ;psect for function _UART_Write
   997  05E3                     _UART_Write:	
   998                           
   999                           ;incstack = 0
  1000                           ; Regs used in _UART_Write: [wreg]
  1001                           ;UART_Write@data stored from wreg
  1002  05E3  00F2               	movwf	UART_Write@data
  1003  05E4                     l925:	
  1004  05E4                     l36:	
  1005                           ;RXTX.c: 39: void UART_Write(char data);RXTX.c: 40: {;RXTX.c: 41:   while(!TRMT);
  1006                           
  1007  05E4  1683               	bsf	3,5	;RP0=1, select bank1
  1008  05E5  1303               	bcf	3,6	;RP1=0, select bank1
  1009  05E6  1C98               	btfss	24,1	;volatile
  1010  05E7  2DE9               	goto	u431
  1011  05E8  2DEA               	goto	u430
  1012  05E9                     u431:	
  1013  05E9  2DE4               	goto	l36
  1014  05EA                     u430:	
  1015  05EA                     l927:	
  1016                           
  1017                           ;RXTX.c: 42:   TXREG = data;
  1018  05EA  0872               	movf	UART_Write@data,w
  1019  05EB  1283               	bcf	3,5	;RP0=0, select bank0
  1020  05EC  1303               	bcf	3,6	;RP1=0, select bank0
  1021  05ED  0099               	movwf	25	;volatile
  1022                           
  1023                           ;RXTX.c: 43:   _delay((unsigned long)((100)*(4000000/4000.0)));
  1024  05EE  3082               	movlw	130
  1025  05EF  00F1               	movwf	??_UART_Write+1
  1026  05F0  30DD               	movlw	221
  1027  05F1  00F0               	movwf	??_UART_Write
  1028  05F2                     u497:	
  1029  05F2  0BF0               	decfsz	??_UART_Write,f
  1030  05F3  2DF2               	goto	u497
  1031  05F4  0BF1               	decfsz	??_UART_Write+1,f
  1032  05F5  2DF2               	goto	u497
  1033  05F6  2DF7               	nop2
  1034  05F7                     l39:	
  1035  05F7  0008               	return
  1036  05F8                     __end_of_UART_Write:	
  1037                           
  1038                           	psect	text6
  1039  05D7                     __ptext6:	
  1040 ;; *************** function _UART_Read *****************
  1041 ;; Defined at:
  1042 ;;		line 56 in file "RXTX.c"
  1043 ;; Parameters:    Size  Location     Type
  1044 ;;		None
  1045 ;; Auto vars:     Size  Location     Type
  1046 ;;		None
  1047 ;; Return value:  Size  Location     Type
  1048 ;;                  1    wreg      unsigned char 
  1049 ;; Registers used:
  1050 ;;		wreg
  1051 ;; Tracked objects:
  1052 ;;		On entry : 0/0
  1053 ;;		On exit  : 0/0
  1054 ;;		Unchanged: 0/0
  1055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1056 ;;      Params:         0       0       0       0       0
  1057 ;;      Locals:         0       0       0       0       0
  1058 ;;      Temps:          1       0       0       0       0
  1059 ;;      Totals:         1       0       0       0       0
  1060 ;;Total ram usage:        1 bytes
  1061 ;; Hardware stack levels used:    1
  1062 ;; This function calls:
  1063 ;;		Nothing
  1064 ;; This function is called by:
  1065 ;;		_main
  1066 ;;		_UART_Read_Text
  1067 ;; This function uses a non-reentrant model
  1068 ;;
  1069                           
  1070                           
  1071                           ;psect for function _UART_Read
  1072  05D7                     _UART_Read:	
  1073  05D7                     l929:	
  1074                           ;incstack = 0
  1075                           ; Regs used in _UART_Read: [wreg]
  1076                           
  1077                           
  1078                           ;RXTX.c: 58:     if(RCIF==1){
  1079  05D7  1283               	bcf	3,5	;RP0=0, select bank0
  1080  05D8  1303               	bcf	3,6	;RP1=0, select bank0
  1081  05D9  1E8C               	btfss	12,5	;volatile
  1082  05DA  2DDC               	goto	u441
  1083  05DB  2DDD               	goto	u440
  1084  05DC                     u441:	
  1085  05DC  2DE1               	goto	l48
  1086  05DD                     u440:	
  1087  05DD                     l931:	
  1088                           
  1089                           ;RXTX.c: 59:         valeido=RCREG;
  1090  05DD  081A               	movf	26,w	;volatile
  1091  05DE  00F0               	movwf	??_UART_Read
  1092  05DF  0870               	movf	??_UART_Read,w
  1093  05E0  00FC               	movwf	_valeido
  1094  05E1                     l48:	
  1095                           ;RXTX.c: 60:     }
  1096                           
  1097                           
  1098                           ;RXTX.c: 65:   return valeido;
  1099  05E1  087C               	movf	_valeido,w
  1100  05E2                     l49:	
  1101  05E2  0008               	return
  1102  05E3                     __end_of_UART_Read:	
  1103                           
  1104                           	psect	text7
  1105  0721                     __ptext7:	
  1106 ;; *************** function _UART_Init *****************
  1107 ;; Defined at:
  1108 ;;		line 16 in file "RXTX.c"
  1109 ;; Parameters:    Size  Location     Type
  1110 ;;  baudrate        4    6[BANK0 ] const long 
  1111 ;; Auto vars:     Size  Location     Type
  1112 ;;  x               2    9[COMMON] unsigned int 
  1113 ;; Return value:  Size  Location     Type
  1114 ;;                  1    wreg      unsigned char 
  1115 ;; Registers used:
  1116 ;;		wreg, status,2, status,0, pclath, cstack
  1117 ;; Tracked objects:
  1118 ;;		On entry : 0/0
  1119 ;;		On exit  : 0/0
  1120 ;;		Unchanged: 0/0
  1121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1122 ;;      Params:         0       4       0       0       0
  1123 ;;      Locals:         2       0       0       0       0
  1124 ;;      Temps:          0      12       0       0       0
  1125 ;;      Totals:         2      16       0       0       0
  1126 ;;Total ram usage:       18 bytes
  1127 ;; Hardware stack levels used:    1
  1128 ;; Hardware stack levels required when called:    1
  1129 ;; This function calls:
  1130 ;;		___aldiv
  1131 ;; This function is called by:
  1132 ;;		_main
  1133 ;; This function uses a non-reentrant model
  1134 ;;
  1135                           
  1136                           
  1137                           ;psect for function _UART_Init
  1138  0721                     _UART_Init:	
  1139  0721                     l899:	
  1140                           ;incstack = 0
  1141                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  1142                           
  1143                           
  1144                           ;RXTX.c: 16: char UART_Init(const long int baudrate);RXTX.c: 17: {;RXTX.c: 18:   unsigne
      +                          d int x;;RXTX.c: 19:   x = (4000000 - baudrate*64)/(baudrate*64);
  1145  0721  1283               	bcf	3,5	;RP0=0, select bank0
  1146  0722  1303               	bcf	3,6	;RP1=0, select bank0
  1147  0723  0826               	movf	UART_Init@baudrate,w
  1148  0724  00AA               	movwf	??_UART_Init
  1149  0725  0827               	movf	UART_Init@baudrate+1,w
  1150  0726  00AB               	movwf	??_UART_Init+1
  1151  0727  0828               	movf	UART_Init@baudrate+2,w
  1152  0728  00AC               	movwf	??_UART_Init+2
  1153  0729  0829               	movf	UART_Init@baudrate+3,w
  1154  072A  00AD               	movwf	??_UART_Init+3
  1155  072B  3006               	movlw	6
  1156  072C                     u355:	
  1157  072C  1003               	clrc
  1158  072D  0DAA               	rlf	??_UART_Init,f
  1159  072E  0DAB               	rlf	??_UART_Init+1,f
  1160  072F  0DAC               	rlf	??_UART_Init+2,f
  1161  0730  0DAD               	rlf	??_UART_Init+3,f
  1162  0731                     u350:	
  1163  0731  3EFF               	addlw	-1
  1164  0732  1D03               	skipz
  1165  0733  2F2C               	goto	u355
  1166  0734  082D               	movf	??_UART_Init+3,w
  1167  0735  00F3               	movwf	___aldiv@divisor+3
  1168  0736  082C               	movf	??_UART_Init+2,w
  1169  0737  00F2               	movwf	___aldiv@divisor+2
  1170  0738  082B               	movf	??_UART_Init+1,w
  1171  0739  00F1               	movwf	___aldiv@divisor+1
  1172  073A  082A               	movf	??_UART_Init,w
  1173  073B  00F0               	movwf	___aldiv@divisor
  1174  073C  0826               	movf	UART_Init@baudrate,w
  1175  073D  00AE               	movwf	??_UART_Init+4
  1176  073E  0827               	movf	UART_Init@baudrate+1,w
  1177  073F  00AF               	movwf	??_UART_Init+5
  1178  0740  0828               	movf	UART_Init@baudrate+2,w
  1179  0741  00B0               	movwf	??_UART_Init+6
  1180  0742  0829               	movf	UART_Init@baudrate+3,w
  1181  0743  00B1               	movwf	??_UART_Init+7
  1182  0744  3006               	movlw	6
  1183  0745                     u365:	
  1184  0745  1003               	clrc
  1185  0746  0DAE               	rlf	??_UART_Init+4,f
  1186  0747  0DAF               	rlf	??_UART_Init+5,f
  1187  0748  0DB0               	rlf	??_UART_Init+6,f
  1188  0749  0DB1               	rlf	??_UART_Init+7,f
  1189  074A                     u360:	
  1190  074A  3EFF               	addlw	-1
  1191  074B  1D03               	skipz
  1192  074C  2F45               	goto	u365
  1193  074D  3000               	movlw	0
  1194  074E  00B2               	movwf	??_UART_Init+8
  1195  074F  3009               	movlw	9
  1196  0750  00B3               	movwf	??_UART_Init+9
  1197  0751  303D               	movlw	61
  1198  0752  00B4               	movwf	??_UART_Init+10
  1199  0753  3000               	movlw	0
  1200  0754  00B5               	movwf	??_UART_Init+11
  1201  0755  082E               	movf	??_UART_Init+4,w
  1202  0756  02B2               	subwf	??_UART_Init+8,f
  1203  0757  082F               	movf	??_UART_Init+5,w
  1204  0758  1C03               	skipc
  1205  0759  0F2F               	incfsz	??_UART_Init+5,w
  1206  075A  2F5C               	goto	u371
  1207  075B  2F5D               	goto	u372
  1208  075C                     u371:	
  1209  075C  02B3               	subwf	??_UART_Init+9,f
  1210  075D                     u372:	
  1211  075D  0830               	movf	??_UART_Init+6,w
  1212  075E  1C03               	skipc
  1213  075F  0F30               	incfsz	??_UART_Init+6,w
  1214  0760  2F62               	goto	u373
  1215  0761  2F63               	goto	u374
  1216  0762                     u373:	
  1217  0762  02B4               	subwf	??_UART_Init+10,f
  1218  0763                     u374:	
  1219  0763  0831               	movf	??_UART_Init+7,w
  1220  0764  1C03               	skipc
  1221  0765  0F31               	incfsz	??_UART_Init+7,w
  1222  0766  2F68               	goto	u375
  1223  0767  2F69               	goto	u376
  1224  0768                     u375:	
  1225  0768  02B5               	subwf	??_UART_Init+11,f
  1226  0769                     u376:	
  1227  0769  0835               	movf	??_UART_Init+11,w
  1228  076A  00F7               	movwf	___aldiv@dividend+3
  1229  076B  0834               	movf	??_UART_Init+10,w
  1230  076C  00F6               	movwf	___aldiv@dividend+2
  1231  076D  0833               	movf	??_UART_Init+9,w
  1232  076E  00F5               	movwf	___aldiv@dividend+1
  1233  076F  0832               	movf	??_UART_Init+8,w
  1234  0770  00F4               	movwf	___aldiv@dividend
  1235  0771  120A  118A  2684  120A  118A  	fcall	___aldiv
  1236  0776  0871               	movf	?___aldiv+1,w
  1237  0777  00FA               	movwf	UART_Init@x+1
  1238  0778  0870               	movf	?___aldiv,w
  1239  0779  00F9               	movwf	UART_Init@x
  1240  077A                     l901:	
  1241                           
  1242                           ;RXTX.c: 20:   if(x>255)
  1243  077A  3001               	movlw	1
  1244  077B  027A               	subwf	UART_Init@x+1,w
  1245  077C  3000               	movlw	0
  1246  077D  1903               	skipnz
  1247  077E  0279               	subwf	UART_Init@x,w
  1248  077F  1C03               	skipc
  1249  0780  2F82               	goto	u381
  1250  0781  2F83               	goto	u380
  1251  0782                     u381:	
  1252  0782  2FDF               	goto	l907
  1253  0783                     u380:	
  1254  0783                     l903:	
  1255                           
  1256                           ;RXTX.c: 21:   {;RXTX.c: 22:     x = (4000000 - baudrate*16)/(baudrate*16);
  1257  0783  1283               	bcf	3,5	;RP0=0, select bank0
  1258  0784  1303               	bcf	3,6	;RP1=0, select bank0
  1259  0785  0826               	movf	UART_Init@baudrate,w
  1260  0786  00AA               	movwf	??_UART_Init
  1261  0787  0827               	movf	UART_Init@baudrate+1,w
  1262  0788  00AB               	movwf	??_UART_Init+1
  1263  0789  0828               	movf	UART_Init@baudrate+2,w
  1264  078A  00AC               	movwf	??_UART_Init+2
  1265  078B  0829               	movf	UART_Init@baudrate+3,w
  1266  078C  00AD               	movwf	??_UART_Init+3
  1267  078D  3004               	movlw	4
  1268  078E                     u395:	
  1269  078E  1003               	clrc
  1270  078F  0DAA               	rlf	??_UART_Init,f
  1271  0790  0DAB               	rlf	??_UART_Init+1,f
  1272  0791  0DAC               	rlf	??_UART_Init+2,f
  1273  0792  0DAD               	rlf	??_UART_Init+3,f
  1274  0793                     u390:	
  1275  0793  3EFF               	addlw	-1
  1276  0794  1D03               	skipz
  1277  0795  2F8E               	goto	u395
  1278  0796  082D               	movf	??_UART_Init+3,w
  1279  0797  00F3               	movwf	___aldiv@divisor+3
  1280  0798  082C               	movf	??_UART_Init+2,w
  1281  0799  00F2               	movwf	___aldiv@divisor+2
  1282  079A  082B               	movf	??_UART_Init+1,w
  1283  079B  00F1               	movwf	___aldiv@divisor+1
  1284  079C  082A               	movf	??_UART_Init,w
  1285  079D  00F0               	movwf	___aldiv@divisor
  1286  079E  0826               	movf	UART_Init@baudrate,w
  1287  079F  00AE               	movwf	??_UART_Init+4
  1288  07A0  0827               	movf	UART_Init@baudrate+1,w
  1289  07A1  00AF               	movwf	??_UART_Init+5
  1290  07A2  0828               	movf	UART_Init@baudrate+2,w
  1291  07A3  00B0               	movwf	??_UART_Init+6
  1292  07A4  0829               	movf	UART_Init@baudrate+3,w
  1293  07A5  00B1               	movwf	??_UART_Init+7
  1294  07A6  3004               	movlw	4
  1295  07A7                     u405:	
  1296  07A7  1003               	clrc
  1297  07A8  0DAE               	rlf	??_UART_Init+4,f
  1298  07A9  0DAF               	rlf	??_UART_Init+5,f
  1299  07AA  0DB0               	rlf	??_UART_Init+6,f
  1300  07AB  0DB1               	rlf	??_UART_Init+7,f
  1301  07AC                     u400:	
  1302  07AC  3EFF               	addlw	-1
  1303  07AD  1D03               	skipz
  1304  07AE  2FA7               	goto	u405
  1305  07AF  3000               	movlw	0
  1306  07B0  00B2               	movwf	??_UART_Init+8
  1307  07B1  3009               	movlw	9
  1308  07B2  00B3               	movwf	??_UART_Init+9
  1309  07B3  303D               	movlw	61
  1310  07B4  00B4               	movwf	??_UART_Init+10
  1311  07B5  3000               	movlw	0
  1312  07B6  00B5               	movwf	??_UART_Init+11
  1313  07B7  082E               	movf	??_UART_Init+4,w
  1314  07B8  02B2               	subwf	??_UART_Init+8,f
  1315  07B9  082F               	movf	??_UART_Init+5,w
  1316  07BA  1C03               	skipc
  1317  07BB  0F2F               	incfsz	??_UART_Init+5,w
  1318  07BC  2FBE               	goto	u411
  1319  07BD  2FBF               	goto	u412
  1320  07BE                     u411:	
  1321  07BE  02B3               	subwf	??_UART_Init+9,f
  1322  07BF                     u412:	
  1323  07BF  0830               	movf	??_UART_Init+6,w
  1324  07C0  1C03               	skipc
  1325  07C1  0F30               	incfsz	??_UART_Init+6,w
  1326  07C2  2FC4               	goto	u413
  1327  07C3  2FC5               	goto	u414
  1328  07C4                     u413:	
  1329  07C4  02B4               	subwf	??_UART_Init+10,f
  1330  07C5                     u414:	
  1331  07C5  0831               	movf	??_UART_Init+7,w
  1332  07C6  1C03               	skipc
  1333  07C7  0F31               	incfsz	??_UART_Init+7,w
  1334  07C8  2FCA               	goto	u415
  1335  07C9  2FCB               	goto	u416
  1336  07CA                     u415:	
  1337  07CA  02B5               	subwf	??_UART_Init+11,f
  1338  07CB                     u416:	
  1339  07CB  0835               	movf	??_UART_Init+11,w
  1340  07CC  00F7               	movwf	___aldiv@dividend+3
  1341  07CD  0834               	movf	??_UART_Init+10,w
  1342  07CE  00F6               	movwf	___aldiv@dividend+2
  1343  07CF  0833               	movf	??_UART_Init+9,w
  1344  07D0  00F5               	movwf	___aldiv@dividend+1
  1345  07D1  0832               	movf	??_UART_Init+8,w
  1346  07D2  00F4               	movwf	___aldiv@dividend
  1347  07D3  120A  118A  2684  120A  118A  	fcall	___aldiv
  1348  07D8  0871               	movf	?___aldiv+1,w
  1349  07D9  00FA               	movwf	UART_Init@x+1
  1350  07DA  0870               	movf	?___aldiv,w
  1351  07DB  00F9               	movwf	UART_Init@x
  1352  07DC                     l905:	
  1353                           
  1354                           ;RXTX.c: 23:     BRGH = 1;
  1355  07DC  1683               	bsf	3,5	;RP0=1, select bank1
  1356  07DD  1303               	bcf	3,6	;RP1=0, select bank1
  1357  07DE  1518               	bsf	24,2	;volatile
  1358  07DF                     l907:	
  1359                           
  1360                           ;RXTX.c: 25:   if(x<256)
  1361  07DF  3001               	movlw	1
  1362  07E0  027A               	subwf	UART_Init@x+1,w
  1363  07E1  3000               	movlw	0
  1364  07E2  1903               	skipnz
  1365  07E3  0279               	subwf	UART_Init@x,w
  1366  07E4  1803               	skipnc
  1367  07E5  2FE7               	goto	u421
  1368  07E6  2FE8               	goto	u420
  1369  07E7                     u421:	
  1370  07E7  2FFA               	goto	l33
  1371  07E8                     u420:	
  1372  07E8                     l909:	
  1373                           
  1374                           ;RXTX.c: 26:   {;RXTX.c: 27:     SPBRG = x;
  1375  07E8  0879               	movf	UART_Init@x,w
  1376  07E9  1683               	bsf	3,5	;RP0=1, select bank1
  1377  07EA  1303               	bcf	3,6	;RP1=0, select bank1
  1378  07EB  0099               	movwf	25	;volatile
  1379  07EC                     l911:	
  1380                           
  1381                           ;RXTX.c: 28:     SYNC = 0;
  1382  07EC  1218               	bcf	24,4	;volatile
  1383  07ED                     l913:	
  1384                           
  1385                           ;RXTX.c: 29:     SPEN = 1;
  1386  07ED  1283               	bcf	3,5	;RP0=0, select bank0
  1387  07EE  1303               	bcf	3,6	;RP1=0, select bank0
  1388  07EF  1798               	bsf	24,7	;volatile
  1389  07F0                     l915:	
  1390                           
  1391                           ;RXTX.c: 30:     TRISC7 = 1;
  1392  07F0  1683               	bsf	3,5	;RP0=1, select bank1
  1393  07F1  1303               	bcf	3,6	;RP1=0, select bank1
  1394  07F2  1787               	bsf	7,7	;volatile
  1395  07F3                     l917:	
  1396                           
  1397                           ;RXTX.c: 31:     TRISC6 = 1;
  1398  07F3  1707               	bsf	7,6	;volatile
  1399  07F4                     l919:	
  1400                           
  1401                           ;RXTX.c: 32:     CREN = 1;
  1402  07F4  1283               	bcf	3,5	;RP0=0, select bank0
  1403  07F5  1303               	bcf	3,6	;RP1=0, select bank0
  1404  07F6  1618               	bsf	24,4	;volatile
  1405  07F7                     l921:	
  1406                           
  1407                           ;RXTX.c: 33:     TXEN = 1;
  1408  07F7  1683               	bsf	3,5	;RP0=1, select bank1
  1409  07F8  1303               	bcf	3,6	;RP1=0, select bank1
  1410  07F9  1698               	bsf	24,5	;volatile
  1411  07FA                     l33:	
  1412  07FA  0008               	return
  1413  07FB                     __end_of_UART_Init:	
  1414                           
  1415                           	psect	text8
  1416  0684                     __ptext8:	
  1417 ;; *************** function ___aldiv *****************
  1418 ;; Defined at:
  1419 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\aldiv.c"
  1420 ;; Parameters:    Size  Location     Type
  1421 ;;  divisor         4    0[COMMON] long 
  1422 ;;  dividend        4    4[COMMON] long 
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;  quotient        4    2[BANK0 ] long 
  1425 ;;  sign            1    1[BANK0 ] unsigned char 
  1426 ;;  counter         1    0[BANK0 ] unsigned char 
  1427 ;; Return value:  Size  Location     Type
  1428 ;;                  4    0[COMMON] long 
  1429 ;; Registers used:
  1430 ;;		wreg, status,2, status,0
  1431 ;; Tracked objects:
  1432 ;;		On entry : 0/0
  1433 ;;		On exit  : 0/0
  1434 ;;		Unchanged: 0/0
  1435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1436 ;;      Params:         8       0       0       0       0
  1437 ;;      Locals:         0       6       0       0       0
  1438 ;;      Temps:          1       0       0       0       0
  1439 ;;      Totals:         9       6       0       0       0
  1440 ;;Total ram usage:       15 bytes
  1441 ;; Hardware stack levels used:    1
  1442 ;; This function calls:
  1443 ;;		Nothing
  1444 ;; This function is called by:
  1445 ;;		_UART_Init
  1446 ;; This function uses a non-reentrant model
  1447 ;;
  1448                           
  1449                           
  1450                           ;psect for function ___aldiv
  1451  0684                     ___aldiv:	
  1452  0684                     l859:	
  1453                           ;incstack = 0
  1454                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1455                           
  1456  0684  1283               	bcf	3,5	;RP0=0, select bank0
  1457  0685  1303               	bcf	3,6	;RP1=0, select bank0
  1458  0686  01A1               	clrf	___aldiv@sign
  1459  0687                     l861:	
  1460  0687  1FF3               	btfss	___aldiv@divisor+3,7
  1461  0688  2E8A               	goto	u251
  1462  0689  2E8B               	goto	u250
  1463  068A                     u251:	
  1464  068A  2E98               	goto	l274
  1465  068B                     u250:	
  1466  068B                     l863:	
  1467  068B  09F0               	comf	___aldiv@divisor,f
  1468  068C  09F1               	comf	___aldiv@divisor+1,f
  1469  068D  09F2               	comf	___aldiv@divisor+2,f
  1470  068E  09F3               	comf	___aldiv@divisor+3,f
  1471  068F  0AF0               	incf	___aldiv@divisor,f
  1472  0690  1903               	skipnz
  1473  0691  0AF1               	incf	___aldiv@divisor+1,f
  1474  0692  1903               	skipnz
  1475  0693  0AF2               	incf	___aldiv@divisor+2,f
  1476  0694  1903               	skipnz
  1477  0695  0AF3               	incf	___aldiv@divisor+3,f
  1478  0696  01A1               	clrf	___aldiv@sign
  1479  0697  0AA1               	incf	___aldiv@sign,f
  1480  0698                     l274:	
  1481  0698  1FF7               	btfss	___aldiv@dividend+3,7
  1482  0699  2E9B               	goto	u261
  1483  069A  2E9C               	goto	u260
  1484  069B                     u261:	
  1485  069B  2EAB               	goto	l869
  1486  069C                     u260:	
  1487  069C                     l865:	
  1488  069C  09F4               	comf	___aldiv@dividend,f
  1489  069D  09F5               	comf	___aldiv@dividend+1,f
  1490  069E  09F6               	comf	___aldiv@dividend+2,f
  1491  069F  09F7               	comf	___aldiv@dividend+3,f
  1492  06A0  0AF4               	incf	___aldiv@dividend,f
  1493  06A1  1903               	skipnz
  1494  06A2  0AF5               	incf	___aldiv@dividend+1,f
  1495  06A3  1903               	skipnz
  1496  06A4  0AF6               	incf	___aldiv@dividend+2,f
  1497  06A5  1903               	skipnz
  1498  06A6  0AF7               	incf	___aldiv@dividend+3,f
  1499  06A7                     l867:	
  1500  06A7  3001               	movlw	1
  1501  06A8  00F8               	movwf	??___aldiv
  1502  06A9  0878               	movf	??___aldiv,w
  1503  06AA  06A1               	xorwf	___aldiv@sign,f
  1504  06AB                     l869:	
  1505  06AB  3000               	movlw	0
  1506  06AC  00A5               	movwf	___aldiv@quotient+3
  1507  06AD  3000               	movlw	0
  1508  06AE  00A4               	movwf	___aldiv@quotient+2
  1509  06AF  3000               	movlw	0
  1510  06B0  00A3               	movwf	___aldiv@quotient+1
  1511  06B1  3000               	movlw	0
  1512  06B2  00A2               	movwf	___aldiv@quotient
  1513  06B3                     l871:	
  1514  06B3  0873               	movf	___aldiv@divisor+3,w
  1515  06B4  0472               	iorwf	___aldiv@divisor+2,w
  1516  06B5  0471               	iorwf	___aldiv@divisor+1,w
  1517  06B6  0470               	iorwf	___aldiv@divisor,w
  1518  06B7  1903               	skipnz
  1519  06B8  2EBA               	goto	u271
  1520  06B9  2EBB               	goto	u270
  1521  06BA                     u271:	
  1522  06BA  2F08               	goto	l891
  1523  06BB                     u270:	
  1524  06BB                     l873:	
  1525  06BB  01A0               	clrf	___aldiv@counter
  1526  06BC  0AA0               	incf	___aldiv@counter,f
  1527  06BD  2ECB               	goto	l877
  1528  06BE                     l875:	
  1529  06BE  3001               	movlw	1
  1530  06BF  00F8               	movwf	??___aldiv
  1531  06C0                     u285:	
  1532  06C0  1003               	clrc
  1533  06C1  0DF0               	rlf	___aldiv@divisor,f
  1534  06C2  0DF1               	rlf	___aldiv@divisor+1,f
  1535  06C3  0DF2               	rlf	___aldiv@divisor+2,f
  1536  06C4  0DF3               	rlf	___aldiv@divisor+3,f
  1537  06C5  0BF8               	decfsz	??___aldiv,f
  1538  06C6  2EC0               	goto	u285
  1539  06C7  3001               	movlw	1
  1540  06C8  00F8               	movwf	??___aldiv
  1541  06C9  0878               	movf	??___aldiv,w
  1542  06CA  07A0               	addwf	___aldiv@counter,f
  1543  06CB                     l877:	
  1544  06CB  1FF3               	btfss	___aldiv@divisor+3,7
  1545  06CC  2ECE               	goto	u291
  1546  06CD  2ECF               	goto	u290
  1547  06CE                     u291:	
  1548  06CE  2EBE               	goto	l875
  1549  06CF                     u290:	
  1550  06CF                     l879:	
  1551  06CF  3001               	movlw	1
  1552  06D0  00F8               	movwf	??___aldiv
  1553  06D1                     u305:	
  1554  06D1  1003               	clrc
  1555  06D2  0DA2               	rlf	___aldiv@quotient,f
  1556  06D3  0DA3               	rlf	___aldiv@quotient+1,f
  1557  06D4  0DA4               	rlf	___aldiv@quotient+2,f
  1558  06D5  0DA5               	rlf	___aldiv@quotient+3,f
  1559  06D6  0BF8               	decfsz	??___aldiv,f
  1560  06D7  2ED1               	goto	u305
  1561  06D8                     l881:	
  1562  06D8  0873               	movf	___aldiv@divisor+3,w
  1563  06D9  0277               	subwf	___aldiv@dividend+3,w
  1564  06DA  1D03               	skipz
  1565  06DB  2EE6               	goto	u315
  1566  06DC  0872               	movf	___aldiv@divisor+2,w
  1567  06DD  0276               	subwf	___aldiv@dividend+2,w
  1568  06DE  1D03               	skipz
  1569  06DF  2EE6               	goto	u315
  1570  06E0  0871               	movf	___aldiv@divisor+1,w
  1571  06E1  0275               	subwf	___aldiv@dividend+1,w
  1572  06E2  1D03               	skipz
  1573  06E3  2EE6               	goto	u315
  1574  06E4  0870               	movf	___aldiv@divisor,w
  1575  06E5  0274               	subwf	___aldiv@dividend,w
  1576  06E6                     u315:	
  1577  06E6  1C03               	skipc
  1578  06E7  2EE9               	goto	u311
  1579  06E8  2EEA               	goto	u310
  1580  06E9                     u311:	
  1581  06E9  2EF9               	goto	l887
  1582  06EA                     u310:	
  1583  06EA                     l883:	
  1584  06EA  0870               	movf	___aldiv@divisor,w
  1585  06EB  02F4               	subwf	___aldiv@dividend,f
  1586  06EC  0871               	movf	___aldiv@divisor+1,w
  1587  06ED  1C03               	skipc
  1588  06EE  0F71               	incfsz	___aldiv@divisor+1,w
  1589  06EF  02F5               	subwf	___aldiv@dividend+1,f
  1590  06F0  0872               	movf	___aldiv@divisor+2,w
  1591  06F1  1C03               	skipc
  1592  06F2  0F72               	incfsz	___aldiv@divisor+2,w
  1593  06F3  02F6               	subwf	___aldiv@dividend+2,f
  1594  06F4  0873               	movf	___aldiv@divisor+3,w
  1595  06F5  1C03               	skipc
  1596  06F6  0F73               	incfsz	___aldiv@divisor+3,w
  1597  06F7  02F7               	subwf	___aldiv@dividend+3,f
  1598  06F8                     l885:	
  1599  06F8  1422               	bsf	___aldiv@quotient,0
  1600  06F9                     l887:	
  1601  06F9  3001               	movlw	1
  1602  06FA                     u325:	
  1603  06FA  1003               	clrc
  1604  06FB  0CF3               	rrf	___aldiv@divisor+3,f
  1605  06FC  0CF2               	rrf	___aldiv@divisor+2,f
  1606  06FD  0CF1               	rrf	___aldiv@divisor+1,f
  1607  06FE  0CF0               	rrf	___aldiv@divisor,f
  1608  06FF  3EFF               	addlw	-1
  1609  0700  1D03               	skipz
  1610  0701  2EFA               	goto	u325
  1611  0702                     l889:	
  1612  0702  3001               	movlw	1
  1613  0703  02A0               	subwf	___aldiv@counter,f
  1614  0704  1D03               	btfss	3,2
  1615  0705  2F07               	goto	u331
  1616  0706  2F08               	goto	u330
  1617  0707                     u331:	
  1618  0707  2ECF               	goto	l879
  1619  0708                     u330:	
  1620  0708                     l891:	
  1621  0708  0821               	movf	___aldiv@sign,w
  1622  0709  1903               	btfsc	3,2
  1623  070A  2F0C               	goto	u341
  1624  070B  2F0D               	goto	u340
  1625  070C                     u341:	
  1626  070C  2F18               	goto	l895
  1627  070D                     u340:	
  1628  070D                     l893:	
  1629  070D  09A2               	comf	___aldiv@quotient,f
  1630  070E  09A3               	comf	___aldiv@quotient+1,f
  1631  070F  09A4               	comf	___aldiv@quotient+2,f
  1632  0710  09A5               	comf	___aldiv@quotient+3,f
  1633  0711  0AA2               	incf	___aldiv@quotient,f
  1634  0712  1903               	skipnz
  1635  0713  0AA3               	incf	___aldiv@quotient+1,f
  1636  0714  1903               	skipnz
  1637  0715  0AA4               	incf	___aldiv@quotient+2,f
  1638  0716  1903               	skipnz
  1639  0717  0AA5               	incf	___aldiv@quotient+3,f
  1640  0718                     l895:	
  1641  0718  0825               	movf	___aldiv@quotient+3,w
  1642  0719  00F3               	movwf	?___aldiv+3
  1643  071A  0824               	movf	___aldiv@quotient+2,w
  1644  071B  00F2               	movwf	?___aldiv+2
  1645  071C  0823               	movf	___aldiv@quotient+1,w
  1646  071D  00F1               	movwf	?___aldiv+1
  1647  071E  0822               	movf	___aldiv@quotient,w
  1648  071F  00F0               	movwf	?___aldiv
  1649  0720                     l284:	
  1650  0720  0008               	return
  1651  0721                     __end_of___aldiv:	
  1652  007E                     btemp	set	126	;btemp
  1653  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     25      25
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _main in BANK0

    _main->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    1331
                                             11 COMMON     1     1      0
                                             22 BANK0      3     3      0
                          _UART_Init
                          _UART_Read
                         _UART_Write
                            _spiInit
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _spiInit                                              4     1      3     360
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _UART_Read                                            1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           18    14      4     836
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     604
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Init
     ___aldiv
   _UART_Read
   _UART_Write
   _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      26       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     19      19       5       31.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      26      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat Feb 15 22:10:10 2020

             __CFG_CP$OFF 0000               _SSPSTATbits 0094                        l33 07FA  
                      l36 05E4                        l39 05F7                        l48 05E1  
                      l49 05E2                       l112 05CD                       l105 0608  
                     l106 060D                       l123 05D6                       l115 05C6  
                     l109 05C7                       l274 0698                       l284 0720  
                     l901 077A                       l911 07EC                       l903 0783  
                     l921 07F7                       l913 07ED                       l905 07DC  
                     l915 07F0                       l907 07DF                       l931 05DD  
                     l861 0687                       l917 07F3                       l909 07E8  
                     l925 05E4                       l941 0604                       l871 06B3  
                     l863 068B                       l919 07F4                       l927 05EA  
                     l943 0607                       l935 05F9                       l881 06D8  
                     l873 06BB                       l865 069C                       l929 05D7  
                     l937 0600                       l857 05C7                       l945 05C2  
                     l961 060E                       l883 06EA                       l875 06BE  
                     l891 0708                       l867 06A7                       l859 0684  
                     l939 0602                       l947 05CE                       l971 0644  
                     l963 061E                       l893 070D                       l885 06F8  
                     l877 06CB                       l869 06AB                       l949 05D3  
                     l981 0662                       l973 064E                       l965 062B  
                     l895 0718                       l887 06F9                       l879 06CF  
                     l983 0669                       l975 0650                       l967 0634  
                     l889 0702                       l985 066F                       l977 0656  
                     l969 063C                       l899 0721                       l987 0679  
                     l979 0660                       u310 06EA                       u311 06E9  
                     u400 07AC                       u240 05CD                       u305 06D1  
                     u241 05CC                       u330 0708                       u250 068B  
                     u331 0707                       u315 06E6                       u251 068A  
                     u411 07BE                       u340 070D                       u260 069C  
                     u420 07E8                       u412 07BF                       u341 070C  
                     u325 06FA                       u261 069B                       u421 07E7  
                     u413 07C4                       u405 07A7                       u270 06BB  
                     u414 07C5                       u350 0731                       u430 05EA  
                     u271 06BA                       u415 07CA                       u431 05E9  
                     u416 07CB                       u360 074A                       u440 05DD  
                     u441 05DC                       u290 06CF                       u450 0600  
            __CFG_CPD$OFF 0000                       u291 06CE                       u371 075C  
                     u355 072C                       u451 05FF                       u380 0783  
                     u372 075D                       u285 06C0                       u381 0782  
                     u373 0762                       u365 0745                       u390 0793  
                     u374 0763                       u375 0768                       u376 0769  
                     u395 078E                       u477 0664                       u487 067B  
                     u497 05F2              __CFG_LVP$OFF 0000                      _BRGH 04C2  
                    _CREN 00C4                      _RCIF 0065                      _SPEN 00C7  
                    _TRMT 04C1                      _TXEN 04C5                      _SYNC 04C4  
            __CFG_WRT$OFF 0000                      _main 060E                      btemp 007E  
                    start 0000             __CFG_IESO$OFF 0000           __end_of___aldiv 0721  
                   ?_main 0070             __CFG_WDTE$OFF 0000                     _ANSEL 0188  
                   _RCREG 001A                     _SPBRG 0099                     _PORTA 0005  
                   _PORTB 0006                     _TRISA 0085                     _TRISB 0086  
                   _TXREG 0019            __CFG_FCMEN$OFF 0000               ?_UART_Write 0070  
      __size_of_UART_Init 00DA        __size_of_UART_Read 000C            __CFG_BOREN$OFF 0000  
         __end_of_spiInit 060E           __end_of_spiRead 05D7                     status 0003  
                   wtemp0 007E            __CFG_MCLRE$OFF 0000           __initialization 07FB  
            __end_of_main 0684                    ??_main 007B                    _ANSELH 0189  
                  _TRISC3 043B                    _TRISC5 043D                    _TRISC6 043E  
                  _TRISC7 043F                    _SSPCON 0014                    _SSPBUF 0013  
          __CFG_PWRTE$OFF 0000         __end_of_UART_Init 07FB         __end_of_UART_Read 05E3  
     __size_of_UART_Write 0015                 ??___aldiv 0078          __end_of_spiWrite 05C7  
               ??_spiInit 0073                 ??_spiRead 0070   __end_of__initialization 07FC  
          __pcstackCOMMON 0070                __pmaintext 060E   __size_of_spiReceiveWait 0007  
            ??_UART_Write 0070                   _SSPSTAT 0094                 ?_spiWrite 0070  
                 ___aldiv 0684        __end_of_UART_Write 05F8                   __ptext1 05C1  
                 __ptext2 05CE                   __ptext3 05C7                   __ptext4 05F8  
                 __ptext5 05E3                   __ptext6 05D7                   __ptext7 0721  
                 __ptext8 0684          ___aldiv@dividend 0074                   _valeido 007C  
                 _spiInit 05F8                   _spiRead 05CE      end_of_initialization 07FC  
        ___aldiv@quotient 0022                ??_spiWrite 0070                 _UART_Init 0721  
               _UART_Read 05D7            UART_Write@data 0072               spiWrite@dat 0070  
          _spiReceiveWait 05C7                ?_UART_Init 0026                ?_UART_Read 0070  
     start_initialization 07FB  __CFG_FOSC$INTRC_NOCLKOUT 0000    __end_of_spiReceiveWait 05CE  
             __pbssCOMMON 007C                 ___latbits 0002             __pcstackBANK0 0020  
         ?_spiReceiveWait 0070                  ?___aldiv 0070               ??_UART_Init 002A  
             ??_UART_Read 0070         __size_of_spiWrite 0006                  ?_spiInit 0070  
                ?_spiRead 0070                UART_Init@x 0079           ___aldiv@divisor 0070  
    spiInit@sTransmitEdge 0072           ___aldiv@counter 0020        spiInit@sDataSample 0070  
               main@COMPU 0037         UART_Init@baudrate 0026          __size_of___aldiv 009D  
        __size_of_spiInit 0016          __size_of_spiRead 0009         __CFG_BOR4V$BOR40V 0000  
           __size_of_main 0076                  _spiWrite 05C1                  main@POT1 0038  
                main@POT2 0036              spiInit@sType 0073         spiInit@sClockIdle 0071  
        ??_spiReceiveWait 0070              ___aldiv@sign 0021                _UART_Write 05E3  
